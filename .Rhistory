count_matrices[[as.character(id)]] <- sub_data
group_seq_dep[[as.character(id)]] <- sum(apply(sub_data, 2, sum))
}
if (!is.null(connection_matrix)){
for (id in unique_groups){
sub_connection_matrix <- connection_matrix[,group_id==id]
connection_matrices[[as.character(id)]] <- sub_connection_matrix
}
}else{
for (id in unique_groups){connection_matrices[[as.character(id)]] <- NULL}
}
# Calculate meta-cells per group proportional to sequencing depth
sub_cells_num <- round((unlist(group_seq_dep)/seq_dep_sum) * meta_cells_num)
# Process each group separately
sub_output_list <-list()
for (i in names(sub_cells_num)){
message("Processing group: ", i)
if (sub_cells_num[i]==0){sub_cells_num_num <- 1} else{sub_cells_num_num <- sub_cells_num[i]}
sub_output <- lib_stabilized_metacells(count_matrices[[i]], connection_matrix[[i]],meta_cells_num=sub_cells_num[i], seed=seed)
colnames(sub_output) <- paste(i, colnames(sub_output), sep="_")
sub_output_list[[i]] <-sub_output
}
# Combine all group results
output <- Reduce(cbind, sub_output_list)
message("Successfully created ", ncol(output), " meta-cells across ",
length(unique_groups), " groups")
return(output)
}
lib_stabilized_metacells_by_group(as.matrix(sample_counts),50,group_id = groups)
dim(lib_stabilized_metacells_by_group(as.matrix(sample_counts),50,group_id = groups))
#' @export
#'
#' @examples
#' # Create a sample similarity matrix
#' connect_mat <- matrix(c(0, 1.2, -0.5,
#'                     1.2, 0, 0.8,
#'                     -0.5, 0.8, 0), nrow = 3)
#'
#' # Process the matrix
#' processed_mat <- process_similarity_matrix(connect_mat)
process_similarity_matrix <- function(similarity_matrix) {
# Input validation
if (!is.matrix(similarity_matrix)) {
stop("Input must be a matrix")
}
if (nrow(similarity_matrix) != ncol(similarity_matrix)) {
stop("Similarity matrix must be square")
}
if (!is.numeric(similarity_matrix)) {
stop("Similarity matrix must contain numeric values")
}
# Set diagonal to 0
diag(similarity_matrix) <- 0
# Handle negative values
if (any(similarity_matrix < 0, na.rm = TRUE)) {
min_abs_val <- min(abs(similarity_matrix[similarity_matrix != 0]), na.rm = TRUE)
replacement_val <- 0.001 * min_abs_val
warning(sprintf(
"%d negative values found in similarity matrix. Replacing with %.2e",
sum(similarity_matrix < 0, na.rm = TRUE),
replacement_val
))
similarity_matrix[similarity_matrix < 0] <- replacement_val
}
return(similarity_matrix)
}
#' @param similarity_matrix Square numeric matrix representing pairwise similaritys between cells.
#' Row and column names should match node identifiers in `total_sets`.
#' @return A numeric vector of transition probabilities where:
#' \itemize{
#'  \item Nodes in the `current_sets` have affinity 0
#'  \item Other nodes have affinity probabilites proportional to their average similarity to current nodes
#' }
#' @export
#'
#' @examples
calculate_affinity_probabilities <- function(total_sets, current_sets, similarity_matrix) {
new_matrix <- c()
new_matrix[current_sets] <- 0
for (i in total_sets[-current_sets]){
new_matrix[i] <- mean(similarity_matrix[i,current_sets]) #calculae the probability of similarity mean of the correlation between new nodes and nodes in current set
}
new_matrix <- new_matrix/sum(new_matrix) #normalized
return(new_matrix)
}
#'
#' @export
#'
#' @examples
#' # Create example data
#' exp_mat <- matrix(rpois(1000, 5), nrow = 100, ncol = 10)
#' meta_list <- list(1:3, 4:6, 7:10)
#'
#' # Generate meta-cell matrix
#' meta_matrix <- create_meta_cell_matrix(exp_mat, meta_list)
create_meta_cell_matrix <- function(exp_matrix, meta_cells_list){
# Input validation
if (!is.matrix(exp_matrix)) {
stop("exp_matrix must be a matrix")
}
if (!is.list(meta_cells_list)) {
stop("meta_cells_list must be a list")
}
if (any(!unlist(lapply(meta_cells_list, is.numeric)))) {
stop("All elements of meta_cells_list must be numeric vectors")
}
# Initialize result matrix
n_meta <- length(meta_cells_list)
meta_matrix <- matrix(
nrow = nrow(exp_matrix),
ncol = n_meta,
dimnames = list(
rownames(exp_matrix),
paste0("MetaCell_", seq_len(n_meta))
)
)
# Create each meta-cell profile
for (i in seq_len(n_meta)) {
cell_indices <- meta_cells_list[[i]]
# Validate cell indices
if (any(cell_indices < 1 | cell_indices > ncol(exp_matrix))) {
stop(sprintf("Invalid cell indices in meta-cell %d", i))
}
# Extract and sum expression profiles
cell_subset <- exp_matrix[, cell_indices, drop = FALSE]
meta_matrix[, i] <- if (ncol(cell_subset) == 1) {
cell_subset
} else {
rowSums(cell_subset)
}
}
return(as.data.frame(meta_matrix))
}
#'   \item Rows represent genes (same as input)
#'   \item Columns represent meta-cells
#'   \item Values are aggregated counts of constituent cells
#' }
#' @export
#'
#' @examples
#' # Example usage:
#' data(sample_counts) # A genes x cells count matrix
#' metacells <- lib_stabilized_metacells(sample_counts, meta_cells_num = 500)
lib_stabilized_metacells <- function(count_matrix, similarity_matrix=NULL, meta_cells_num=1000, seed=123){
# Input validation
if (!is.matrix(count_matrix)) {
stop("count_matrix must be a matrix")
}
if (any(count_matrix < 0)) {
stop("count_matrix contains negative values")
}
if (meta_cells_num <= 0 || meta_cells_num > ncol(count_matrix)) {
stop("meta_cells_num must be between 1 and number of cells")
}
# Set random seed if provided
if (!is.numeric(seed)) {
stop("seed must be an number")
}
# Create similarity matrix if not provided
if (is.null(similarity_matrix)){
message("Computing cell-cell similaritys by pearson correlation...")
similarity_matrix <- process_similarity_matrix(WGCNA::cor(log2(count_matrix+0.00001)))
}
# Calculate transition probabilities
message("Calculating cell affinities...")
similarity_matrix <- process_similarity_matrix(similarity_matrix)
seq_dep <- apply(count_matrix, 2, sum)
mean_cells <- ncol(count_matrix)/meta_cells_num
#Filter outlier cells with extremely high library sizes
filtered <- seq_dep<(median(seq_dep)*mean_cells)
count_matrix <- count_matrix[,filtered]
similarity_matrix <- similarity_matrix[filtered, filtered]
seq_dep <- seq_dep[filtered]
#Construct meta-cells
message("Building meta-cells...")
meta_index <- meta_cells_index(seq_dep, similarity_matrix, meta_cells_num=meta_cells_num, seed=seed)
# Create final meta-cell matrix
meta_cells <- create_meta_cell_matrix(count_matrix, meta_index)
rownames(meta_cells) <- rownames(count_matrix)
message(paste("Successfully created", ncol(meta_cells), "meta-cells"))
return(meta_cells)
}
#'
#' @examples
#' # Example usage:
#' data(sample_counts) # genes x cells matrix
#' groups <- rep(c("A","B"), each=50) # 100 cells
#' metacells <- lib_stabilized_metacells_by_group(
#'   count_matrix = sample_counts,
#'   meta_cells_num = 200,
#'   group_id = groups
#' )
lib_stabilized_metacells_by_group <- function(count_matrix, meta_cells_num=1000,  group_id, similarity_matrix=NULL, seed=123){
# Input validation
if (!is.matrix(count_matrix)) {
stop("count_matrix must be a matrix")
}
if (length(group_id) != ncol(count_matrix)) {
stop("group_id length must match number of cells in count_matrix")
}
if (meta_cells_num <= 0) {
stop("meta_cells_num must be a positive integer")
}
cells_seq_dep <- apply(count_matrix, 2, sum)
seq_dep_sum <- sum(cells_seq_dep)
group_seq_dep <- list()
count_matrices <- list()
group_id <- as.character(group_id)
similarity_matrices <- list()
unique_groups <- unique(group_id)
# Split data by groups
for (id in unique_groups){
sub_data <- count_matrix[, group_id==id]
count_matrices[[as.character(id)]] <- sub_data
group_seq_dep[[as.character(id)]] <- sum(apply(sub_data, 2, sum))
}
if (!is.null(similarity_matrix)){
for (id in unique_groups){
sub_similarity_matrix <- similarity_matrix[,group_id==id]
similarity_matrices[[as.character(id)]] <- sub_similarity_matrix
}
}else{
for (id in unique_groups){similarity_matrices[[as.character(id)]] <- NULL}
}
# Calculate meta-cells per group proportional to sequencing depth
sub_cells_num <- round((unlist(group_seq_dep)/seq_dep_sum) * meta_cells_num)
# Process each group separately
sub_output_list <-list()
for (i in names(sub_cells_num)){
message("Processing group: ", i)
if (sub_cells_num[i]==0){sub_cells_num_num <- 1} else{sub_cells_num_num <- sub_cells_num[i]}
sub_output <- lib_stabilized_metacells(count_matrices[[i]], similarity_matrix[[i]],meta_cells_num=sub_cells_num[i], seed=seed)
colnames(sub_output) <- paste(i, colnames(sub_output), sep="_")
sub_output_list[[i]] <-sub_output
}
# Combine all group results
output <- Reduce(cbind, sub_output_list)
message("Successfully created ", ncol(output), " meta-cells across ",
length(unique_groups), " groups")
return(output)
}
#' @param n_cells Number of cells (default: 200)
#' @param n_groups Number of cell groups/clusters (default: 3)
#' @param seed Random seed for reproducibility (default: 123)
#'
#' @return A sparse matrix (dgCMatrix) with genes as rows and cells as columns
#' @export
#'
#' @examples
#' sample_counts <- generate_sample_counts()
#' dim(sample_counts)
generate_sample_counts <- function(n_genes = 1000, n_cells = 200, n_groups = 3, seed = 123) {
set.seed(seed)
# Load required package
if (!requireNamespace("Matrix", quietly = TRUE)) {
stop("Please install package 'Matrix' to use this function")
}
# Create base expression matrix with negative binomial distribution
base_means <- 2^rnorm(n_genes, mean = 2, sd = 2)
dispersion <- 1/abs(rnorm(n_genes, mean = 0.5, sd = 0.2))
# Create group-specific effects (ensure matrix dimensions are correct)
group_effects <- matrix(
2^rnorm(n_genes * n_groups, mean = 0, sd = 1),
nrow = n_genes,
ncol = n_groups
)
# Assign cells to groups (1 to n_groups)
group_ids <- sample(seq_len(n_groups), n_cells, replace = TRUE)
# Generate counts
counts <- matrix(0, nrow = n_genes, ncol = n_cells)
for (i in seq_len(n_cells)) {
group <- group_ids[i]
# Ensure group index is within bounds
if (group > n_groups || group < 1) {
stop(paste("Invalid group index:", group))
}
means <- base_means * group_effects[, group]
counts[, i] <- rnbinom(n_genes, size = 1/dispersion, mu = means)
}
# Add dropout events (technical zeros)
dropout_prob <- 1 / (1 + exp(-(log(base_means) - 2)))
dropout <- matrix(
rbinom(n_genes * n_cells, 1, dropout_prob),
nrow = n_genes,
ncol = n_cells
)
counts <- counts * (1 - dropout)
# Convert to sparse matrix
counts <- Matrix::Matrix(counts, sparse = TRUE)
# Add row and column names
rownames(counts) <- paste0("Gene_", seq_len(n_genes))
colnames(counts) <- paste0("Cell_", seq_len(n_cells))
return(counts)
}
# 生成示例数据
sample_counts <- generate_sample_counts()
groups <- rep(c("A","B"), each=50)
dim(sample_counts)
lib_stabilized_metacells_by_group(sample_counts,10,groups)
lib_stabilized_metacells_by_group(as.matrix(sample_counts),10,groups)
groups <- rep(c("A","B"), each=100)
lib_stabilized_metacells_by_group(as.matrix(sample_counts),10,groups)
#' @param meta_cells_num Integer specifying the target number meta-cells to create.
#' @param seed Integer for random seed. Set for reproducible sampling when creating meta-cells.
#' @return A list where each element contains the indices of cells belonging to one meta-cell.
#' @export
#'
#' @examples
#' #Example usage:
#' seq_depth <- c(1000,1501,800,1200,2000,900)
#' similarity <- matrix(runif(36), nrow=6)
#' meta_indices <- meta_cells_index(seq_depth, prob_mat, 3)
meta_cells_index <- function(seq_dep, similarity_matrix, meta_cells_num, seed=123){
# Input validation
if (!is.numeric(seq_dep)) stop("seq_dep must be a numeric vector")
if (!is.matrix(similarity_matrix) || nrow(similarity_matrix) != ncol(similarity_matrix)) {
stop("similarity_matrix must be a square matrix")
}
if (length(seq_dep) != nrow(similarity_matrix)) {
stop("Length of seq_dep must match dimension of similarity_matrix")
}
if (!is.numeric(meta_cells_num) || meta_cells_num <= 0) {
stop("meta_cells_num must be a positive integer")
}
total_sets <- seq_along(seq_dep)
target_lib_size <- sum(seq_dep)/meta_cells_num
meta_cells <- list()
iteration=0
while (any(seq_dep<Inf)){
iteration = iteration + 1
# Start with cell having smallest remaining library size
start_node <- which.min(seq_dep)
if (seq_dep[start_node] < target_lib_size){
last_depth <- 0
current_depth <- seq_dep[start_node]
current_meta_cell <- c(start_node)
while (current_depth < target_lib_size){
next_probs <- calculate_affinity_probabilities(total_sets, current_meta_cell, similarity_matrix)
if(all(is.na(next_probs))){break}
# Sample next cell weighted by affinity probabilities
set.seed(seed)
new_node <- sample.int(length(next_probs), size=1, prob=next_probs)
last_depth <- current_depth
current_depth <- current_depth + seq_dep[new_node]
current_meta_cell <- c(current_meta_cell, new_node)
}
if (abs(current_depth - target_lib_size) > abs(last_depth - target_lib_size)){
current_meta_cell <- current_meta_cell[-length(current_meta_cell)]
}
}else{
current_meta_cell <- start_node
}
# Store results and update tracking variables
meta_cells[[iteration]] <- current_meta_cell
# Remove assigned cells from further consideration
similarity_matrix[current_meta_cell,] <- 0
similarity_matrix[,current_meta_cell] <- 0
seq_dep[current_meta_cell] <- Inf
}
return(meta_cells)
}
lib_stabilized_metacells_by_group(as.matrix(sample_counts),10,groups)
sample_counts
as.matrix(sample_counts)
?usethis::use_data
usethis::use_data(sample_counts, overwrite = TRUE)
devtools::document()
pkgload::dev_help('generate_sample_counts')
pkgload::dev_help('process_similarity_matrix')
devtools::document()
devtools::build()
library(lsmetacell)
data(sample_counts)
groups <- rep(c("A","B"), each=100)
lib_stabilized_metacells_by_group(as.matrix(sample_counts),10,groups)
library(lsmetacell)
lsmetacell
devtools::document()
devtools::document()
devtools::build()
library(lsmetacell)
library(lsmetacell)
?process_similarity_matrix
library(lsmetacell)
data("sample_counts")
?process_similarity_matrix
??process_similarity_matrix
library(lsmetacell)
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
library(lsmetacell)
library(lsmetacell)
all_cells <- paste0("Cell", 1:100)
names(all_cells) <- all_cells
current_metacell <- c("Cell1", "Cell5", "Cell10")
sim_mat <- matrix(runif(10000), nrow = 100,
dimnames = list(all_cells, all_cells))
aff_probs <- calculate_affinity_probabilities(
total_sets = all_cells,
current_sets = current_metacell,
similarity_matrix = sim_mat
)
aff_probs
calculate_affinity_probabilities1 <- function(total_sets, current_sets, similarity_matrix) {
# Input validation
if (!all(current_sets %in% total_sets)) {
stop("All current_sets must be present in total_sets")
}
if (!identical(rownames(similarity_matrix), colnames(similarity_matrix)) {
calculate_affinity_probabilities1 <- function(total_sets, current_sets, similarity_matrix) {
calculate_affinity_probabilities1 <- function(total_sets, current_sets, similarity_matrix) {
# Input validation
if (!all(current_sets %in% total_sets)) {
stop("All current_sets must be present in total_sets")
}
if (!identical(rownames(similarity_matrix), colnames(similarity_matrix)) {
calculate_affinity_probabilities1 <- function(total_sets, current_sets, similarity_matrix) {
# Input validation
if (!all(current_sets %in% total_sets)) {
stop("All current_sets must be present in total_sets")
}
if (!identical(rownames(similarity_matrix), colnames(similarity_matrix))) {
stop("Similarity matrix must be symmetric (identical row and column names)")
}
# Initialize result vector with 0 for current metacell members
affinities <- setNames(rep(0, length(total_sets)), total_sets)
# Identify target cells (not in current metacell)
target_cells <- setdiff(total_sets, current_sets)
# Calculate mean similarities for target cells
mean_similarities <- vapply(target_cells, function(cell) {
mean(similarity_matrix[cell, current_sets, drop = FALSE])
}, numeric(1))
# Normalize to get probabilities
affinities[target_cells] <- mean_similarities / sum(mean_similarities)
return(affinities)
}
aff_probs1 <- calculate_affinity_probabilities1(
total_sets = all_cells,
current_sets = current_metacell,
similarity_matrix = sim_mat
)
aff_probs==aff_probs1
aff_probs <- calculate_affinity_probabilities(
total_sets = all_cells,
current_sets = current_metacell,
similarity_matrix = sim_mat
)
aff_probs==aff_probs1
current_metacell
aff_probs
aff_probs1
new_node <- sample.int(length(aff_probs), size=1, prob=aff_probs)
new_node
aff_probs
set.seed(123)
new_node <- sample.int(length(aff_probs), size=1, prob=aff_probs)
new_node
set.seed(123)
new_node <- sample.int(length(aff_probs), size=1, prob=aff_probs)
new_node
set.seed(123)
new_node <- sample.int(length(aff_probs), size=1, prob=aff_probs1)
new_node
？sample.int
?sample.int
sample(2,prob=c(0.1,0.9))
sample.int(2,prob=c(0.1,0.9))
sample.int(2,size=1,prob=c(0.1,0.9))
sample.int(2,size=1,prob=c(0.1,0.9))
sample.int(2,size=1,prob=c(0.1,0.9))
aff_probs
test <- c(0.1,0.9)
test1 <- c(0.1,0.9)
names(test) <- c("Cell1","Cell2")
names(test1) <- c("Cell2","Cell1")
sample.int(2,size=1,prob=test)
sample.int(2,size=1,prob=test1)
aff_probs <- calculate_affinity_probabilities(
total_sets = all_cells,
current_sets = current_metacell,
similarity_matrix = sim_mat
)
aff_probs
devtools::document()
devtools::build()
library(lsmetacell)
library(lsmetacell)
install.packages("H:/mypkg/lsmetacell_0.1.0.tar")
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
